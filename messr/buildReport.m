
function r = buildReport(fileName, h, ss, chartRange, highlight)

    pass = cell.empty(1, 0);
    if ~isempty(highlight)
        pass = {"highlight", rephrase.Highlight(highlight(1), highlight(end))};
    end
    steadyLine = {"lineWidth", 0};

    r = rephrase.Report("Data report");

    p = rephrase.Pager("", "pass", pass);

    g = rephrase.Grid("Macro", [], 3, "pass", {"dateFormat", "YYYY:Q", "transform", @(x) 100*(x-1)});
    %(
        g + rephrase.SeriesChart.fromSeries( ...
            {"Real output (modified GNI), Q/Q PA", chartRange} ...
            , {"Data", h.roc_y^4} ...
            , {"Model S/S", ss.roc_y_tnd^4, steadyLine{:}} ...
        );

%         g + rephrase.SeriesChart.fromSeries( ...
%             {"Real exchange rate against EA, Q/Q PA", chartRange} ...
%             , {"Data", h.roc_re^4} ...
%             , {"Model S/S", ss.roc_re_tnd^4, steadyLine{:}} ...
%         );

        g + rephrase.SeriesChart.fromSeries( ...
            {"Consumer price index, Q/Q PA", chartRange} ...
            , {"Data", h.roc_cpi^4} ...
            , {"Model S/S", ss.roc_cpi^4, steadyLine{:}} ...
        );

        g + rephrase.SeriesChart.fromSeries( ...
            {"Output deflator, Q/Q PA", chartRange} ...
            , {"Data", h.roc_py^4} ...
            , {"Model S/S", ss.roc_py^4, steadyLine{:}} ...
        );

        g + rephrase.SeriesChart.fromSeries( ...
            {"Output gap, %", chartRange} ...
            , {"Data", h.y_gap} ...
            , {"Model S/S", ss.y_gap, steadyLine{:}} ...
        );

%         g + rephrase.SeriesChart.fromSeries( ...
%             {"Real exchange rate gap, %", chartRange} ...
%             , {"Data", h.re_gap} ...
%             , {"Model S/S", ss.re_gap, steadyLine{:}} ...
%         );

        g + rephrase.SeriesChart.fromSeries( ...
            {"Short term rate, % PA", chartRange} ...
            , {"Data", 400*h.rp, "transform", []} ...
            , {"Model S/S", 400*ss.rp, steadyLine{:}} ...
        );
    %)
    p + g;


    g = rephrase.Grid("Bank credit creation", [], 3, "pass", {"dateFormat", "YYYY:Q", "transform", @(x) 100*x});
    %(
        g + rephrase.SeriesChart.fromSeries( ...
            {"Gross loans to nominal output, % PA", chartRange} ...
            , {"Data", h.l_to_4ny} ...
            , {"Model S/S", ss.l_to_4ny, steadyLine{:}} ...
        );

        g + rephrase.SeriesChart.fromSeries( ...
            {"Net loans to nominal output, % PA", chartRange} ...
            , {"Data", h.le_to_4ny} ...
            , {"Model S/S", ss.le_to_4ny, steadyLine{:}} ...
        );

        g + rephrase.SeriesChart.fromSeries( ...
            {"Fixed income secs to nominal output, % PA", chartRange} ...
            , {"Data", h.sec_to_4ny} ...
            , {"Model S/S", ss.sec_to_4ny, steadyLine{:}} ...
        );
    %)
    p + g;

    g = rephrase.Grid("Bank loan portfolios and performance", [], 3, "pass", {"dateFormat", "YYYY:Q", "transform", @(x) 100*x});
    %(
        g + rephrase.SeriesChart.fromSeries( ...
            {"Provisions to gross loans, % PA", chartRange} ...
            , {"Data", h.a / h.l} ...
        );

        g + rephrase.SeriesChart.fromSeries( ...
            {"Nonperforming loans to gross loans, % PA", chartRange} ...
            , {"Data", h.ln / h.l} ...
        );

        g + rephrase.SeriesChart.fromSeries( ...
            {"Provisions to nonperforming loans, % PA", chartRange} ...
            , {"Data", h.a / h.ln} ...
        );
    %)
    p + g;


    g = rephrase.Grid("Lending and funding rates", [], 3, "pass", {"dateFormat", "YYYY:Q", "transform", @(x) 400*x});
    % (
        g + rephrase.SeriesChart.fromSeries( ...
            {"Lending rates, % PA", chartRange} ...
            , {"Stock rates data", h.rl} ...
            , {"New rates data", h.new_rl} ...
        );

        g + rephrase.SeriesChart.fromSeries( ...
            {"Deposit rates, % PA", chartRange} ...
            , {"Stock rates data", h.rd} ...
            , {"New rates data", h.new_rd} ...
        );

        g + rephrase.SeriesChart.fromSeries( ...
            {"Short term cash rate, % PA", chartRange} ...
            , {"Data", h.rp} ...
        );

        g + rephrase.SeriesChart.fromSeries( ...
            {"Lending spreads, % PP", chartRange} ...
            , {"Stock lending spreads data", h.rl-h.rp} ...
            , {"New lending spreads data", h.new_rl-h.rp} ...
        );

        g + rephrase.SeriesChart.fromSeries( ...
            {"Deposit spreads, % PA", chartRange} ...
            , {"Stock deposit spreads data", h.rd-h.rp} ...
            , {"New deposit spreads data", h.new_rd-h.rp} ...
        );
    % )
    p + g;



    g = rephrase.Grid("Bank balance sheets", [], 3, "pass", {"dateFormat", "YYYY:Q"});
    %(
        g + rephrase.SeriesChart.fromSeries( ...
            {"Bank assets", chartRange, "pass", {"transform", @(x) x*1e-3}} ...
            , {"Net loans" h.le, "stackGroup", "1", "fillColor", "half-transparent", "fill", "tonexty"} ...
            , {"Fixed income secs" h.sec, "stackGroup", "1", "fillColor", "half-transparent", "fill", "tonexty"} ...
            , {"Other net assets" h.oae, "stackGroup", "1", "fillColor", "half-transparent", "fill", "tonexty"} ...
        );

        g + rephrase.SeriesChart.fromSeries( ...
            {"Bank liabilities", chartRange, "pass", {"transform", @(x) x*1e-3}} ...
            , {"Non-equity liabilities" h.d, "stackGroup", "1", "fillColor", "half-transparent", "fill", "tonexty"} ...
            , {"Balance sheet capital" h.bk, "stackGroup", "1", "fillColor", "half-transparent", "fill", "tonexty"} ...
        );
    %)
    p + g;


    g = rephrase.Grid("Bank capital and regulation", [], 3, "pass", {"dateFormat", "YYYY:Q"});
    %(
        g + rephrase.SeriesChart.fromSeries( ...
            {"Return on bank capital", chartRange, "pass", {"transform", @(x) 400*x}} ...
            , {"Data", h.rbk} ...
            , {"Model S/S", ss.rbk, steadyLine{:}} ...
        );

        g + rephrase.SeriesChart.fromSeries( ...
            {"Regulatory capital to RWA, %", chartRange, "pass", {"transform", @(x) 100*x}} ...
            , {"Data", h.car} ...
            , {"Model S/S", ss.car, steadyLine{:}} ...
        );

        g + rephrase.SeriesChart.fromSeries( ...
            {"Regulatory to balance sheet capital, %", chartRange, "pass", {"transform", @(x) 100*x}} ...
            , {"Data", h.reg_to_bk} ...
            , {"Model S/S", ss.reg_to_bk, steadyLine{:}} ...
        );
    %)
    p + g;


    r + p;


    build(r, fileName, [], "source", "web");

end%

